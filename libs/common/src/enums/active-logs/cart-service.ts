export enum CartPaymentServiceFunctions {
  ValidateTestsPriceChanges = 'ValidateTestsPriceChanges',
  ValidateMedicationsPaymentPriceChanges = 'ValidateMedicationsPaymentPriceChanges',
  ValidateBookedAppointmentPriceChanges = 'ValidateBookedAppointmentPriceChanges',
  ValidateOrderPrices = 'ValidateOrderPrices',
  ValidatePlanPriceChanges = 'ValidatePlanPriceChanges',
  CreateEphemeralKeys = 'CreateEphemeralKeys',
  PaymentSheet = 'PaymentSheet',
  GetOrCreateNewSetupIntent = 'GetOrCreateNewSetupIntent',
  CreateStripeCustomerAndSaveInPatient = 'CreateStripeCustomerAndSaveInPatient',
  DeleteSetupIntents = 'DeleteSetupIntents',
  PaymentInfo = 'PaymentInfo',
  CreatesOrUpdatesSetupIntentV2 = 'CreatesOrUpdatesSetupIntentV2',
  ConfirmPayment = 'ConfirmPayment',
  ConfirmPaymentV2 = 'ConfirmPaymentV2',
  ValidateSplitAmountSum = 'ValidateSplitAmountSum',
  ValidateSetupIntents = 'ValidateSetupIntents',
  ValidateSetupIntentIds = 'ValidateSetupIntentIds',
  ValidateCartAppointmentData = 'ValidateCartAppointmentData',
  ValidateBookedAppointment = 'ValidateBookedAppointment',
  FindSetupIntentV2 = 'findSetupIntentV2',
  UpdateCartSetupIntentIdempotencyIds = 'UpdateCartSetupIntentIdempotencyIds',
  ValidateOrdersUpdate = 'ValidateOrdersUpdate',
  RetrievePaymentIntent = 'RetrievePaymentIntent',
  RetrieveCharge = 'RetrieveCharge',
  CreatePaymentMethod = 'CreatePaymentMethod',
  GetSingleOrDominantServiceType = 'GetSingleOrDominantServiceType',
  GetSlot = 'GetSlot',
  IncrementSlotAppointmentCount = 'IncrementSlotAppointmentCount',
  UpdatePatientPrescriptionAfterCheckout = 'UpdatePatientPrescriptionAfterCheckout',
  ProcessWireTransfer = 'ProcessWireTransfer',
  FinPatientPlanCartItem = 'FinPatientPlanCartItem',
  UpdatePatientPlanAfterCheckout = 'UpdatePatientPlanAfterCheckout',
  ConfirmBookedAppointmentPayment = 'ConfirmBookedAppointmentPayment',
  ConfirmAdhocPayment = 'ConfirmAdhocPayment',
  ValidateAppointmentData = 'ValidateAppointmentData',
  CheckSlotsAvailability = 'CheckSlotsAvailability',
  CreatePaymentOrder = 'CreatePaymentOrder',
  CreatePaymentIntent = 'CreatePaymentIntent',
  CheckOutCartUpdatePatientProfile = 'CheckOutCartUpdatePatientProfile',
  CheckOutCartPaymentHelperGetCategory = 'CheckOutCartPaymentHelperGetCategory',
  UpdateExpectedDayOneOfPeriod = 'UpdateExpectedDayOneOfPeriod',
  CartCreateIdempotencyIdAndCheckIfItAlreadyPaid = 'CartCreateIdempotencyIdAndCheckIfItAlreadyPaid',
  CapturePaymentIntent = 'captuCapturePaymenCapturePaymentIntenttIntentrePaymentIntent',
  CancelPaymentIntent = ' CancelPaymentIntent',
  UpdateTestOrderItemConfigurations = 'UpdateTestOrderItemConfigurations',
  CreateSubscription = 'CreateSubscription',
  ValidateAdhocPaymentIsNotArchived = 'ValidateAdhocPaymentIsNotArchived',
}

export enum CartPaymentServiceActions {
  ValidateMedicationsPaymentPriceChangesFailed = 'ValidateMedicationsPaymentPriceChangesFailed',
  ValidateBookedAppointmentPriceChangesFailed = 'ValidateBookedAppointmentPriceChangesFailed',
  ValidatePlanPriceChangesFailed = 'ValidatePlanPriceChangesFailed',
  ValidateTestsPriceChangesFailed = 'ValidateTestsPriceChangesFailed',
  ValidateOrderPricesFailed = 'ValidateOrderPricesFailed',
  RetrievePaymentIntentFailed = 'RetrievePaymentIntentFailed',
  RetrieveChargeFailed = 'RetrieveChargeFailed',
  CreateEphemeralKeysFailed = 'CreateEphemeralKeysFailed',
  CreateEphemeralKeys = 'CreateEphemeralKeys',
  CreateStripeCustomerAndSaveInPatientFailed = 'CreateStripeCustomerAndSaveInPatientFailed',
  StartCreateStripeCustomerAndSaveInPatient = 'StartCreateStripeCustomerAndSaveInPatient',
  CreatedStripeCustomerSuccessfully = 'CreatedStripeCustomerSuccessfully',
  UpdatePatientSuccessfully = 'UpdatePatientSuccessfully',
  GetOrCreateNewSetupIntentStart = 'GetOrCreateNewSetupIntentStart',
  SetupIntentStartCreatedSuccessfully = 'SetupIntentStartCreatedSuccessfully',
  ConfirmPaymentV2Failed = 'ConfirmPaymentV2Failed',
  ConfirmAdhocPaymentFailed = 'ConfirmAdhocPaymentFailed',
  PrescriptionNotFound = 'PrescriptionNotFound',
  PatientPlanNotFound = 'PatientPlanNotFound',
  PatientPlanCardNotFound = 'PatientPlanCardNotFound',
  PatientNotFound = 'PatientNotFound',
  ValidateBookedAppointment = 'ValidateBookedAppointment',
  StripeCreateCustomer = 'StripeCreateCustomer',
  UpdateStripeCustomerId = 'UpdateStripeCustomerId',
  DeleteSetupIntentsFailed = 'DeleteSetupIntentsFailed',
  ReadStripeCustomerId = 'ReadStripeCustomerId',
  StripeCustomerNotCreated = 'StripeCustomerNotCreated',
  CreatePaymentIntentFail = 'CreatePaymentIntentFail',
  CancelPaymentIntent = 'CancelPaymentIntent',
  CancelPaymentIntentFail = 'CancelPaymentIntentFail',
  StripeIdempotencyError = 'StripeIdempotencyError',
  PaymentSetupDoesNotBelongToUser = 'PaymentSetupDoesNotBelongToUser',
  PaymentSetupNotComplete = 'PaymentSetupNotComplete',
  PaymentInfoFailed = 'PaymentInfoFailed',
  CreatesOrUpdatesSetupIntentV2Failed = 'CreatesOrUpdatesSetupIntentV2Failed',
  PaymentIntentRequiresCapture = 'PaymentIntentRequiresCapture',
  PaymentIntentSuccessFailed = 'PaymentIntentSuccessFailed',
  ConfirmPaymentFailed = 'ConfirmPaymentFailed',
  GetCartItems = 'GetCartItems',
  SetupIntentIsAlreadySucceed = 'SetupIntentIsAlreadySucceed',
  CantFindServiceCategory = 'CantFindServiceCategory',
  SetupIntentCancel = 'SetupIntentCancel',
  CantFindServiceProvider = 'CantFindServiceProvider',
  UpdatePatientDoesntHaveSexAtBirth = 'UpdatePatientDoesntHaveSexAtBirth',
  PaymentMethodNotProvided = 'PaymentMethodNotProvided',
  CantFindSlot = 'CantFindSlot',
  GetCartMainData = 'GetCartMainData',
  ValidateRevisions = 'ValidateRevisions',
  ValidateAppointmentDataStart = 'ValidateAppointmentDataStart',
  CheckSlotsAvailabilityStart = 'CheckSlotsAvailabilityStart',
  ConfirmPayment = 'ConfirmPayment',
  ConfirmPaymentV2 = 'ConfirmPaymentV2',
  ValidateSplitAmountSumFailed = 'ValidateSplitAmountSumFailed',
  ValidateSplitAmountSum = 'ValidateSplitAmountSum',
  GetPaymentInfo = 'GetPaymentInfo',
  CreatesSetupIntentV2 = 'CreatesSetupIntentV2',
  ServiceCategoryDifferentThanInitialConsultation = 'ServiceCategoryDifferentThanInitialConsultation',
  CartAlreadyPaid = 'CartAlreadyPaid',
  CapturePaymentIntentFail = 'CapturePaymentIntentFail',
  CapturePaymentIntentWarn = 'CapturePaymentIntentWarn',
  CreatePaymentIntentWarn = 'CreatePaymentIntentWarn',
  CartNotFound = 'CartNotFound',
  StripeSetupIntentNotFound = 'StripeSetupIntentNotFound',
  FailedToUpdateSetupIntentIdempotencyId = 'FailedToUpdateSetupIntentIdempotencyId',
  PatientMilestoneNotFound = 'PatientMilestoneNotFound',
  SetupIntentsCountMismatch = 'SetupIntentsCountMismatch',
  CreatePaymentMethod = 'CreatePaymentMethod',
  RevisionsValidationFailed = 'RevisionsValidationFailed',
  CheckoutTimeSlotNotAvailable = 'CheckoutTimeSlotNotAvailable',
  AppointmentNotFound = 'AppointmentNotFound',
  AppointmentNotPaid = 'AppointmentNotPaid',
  EmptyCartSetupIntent = 'EmptyCartSetupIntent',
  CreateSubscriptionFailed = 'CreateSubscriptionFailed',
  AdhocPaymentsIsArchived = 'AdhocPaymentsIsArchived',
}

export enum CartServiceFunctions {
  GetCarts = 'GetCarts',
  HandleCreateMedicationCartItem = 'HandleCreateMedicationCartItem',
  HandleBookedAppointmentCartItem = 'HandleBookedAppointmentCartItem',
  GetCartItemsDetail = 'GetCartItemsDetail',
  HandlePatientMilestone = 'HandlePatientMilestone',
  HandleCreatePlanCartItem = 'HandleCreatePlanCartItem',
  HandleCreateAdhocCartItem = 'HandleCreateAdhocCartItem',
  CreateCartItem = 'CreateCartItem',
  GetOrCreateCart = 'GetOrCreateCart',
  PatientHasOHIP = 'PatientHasOHIP',
  GetFreeSchedulingSlotByUUID = 'GetFreeSchedulingSlotByUUID',
  GetPlanAndAddonsTotal = 'GetPlanAndAddonsTotal',
}

export enum CartServiceActions {
  GetCartsFailed = 'GetCartsFailed',
  CreateBookedAppointmentCartFailed = 'CreateBookedAppointmentCartFailed',
  GetOrCreateCartFailed = 'GetOrCreateCartFailed',
  GetOrCreateCart = 'GetOrCreateCart',
  TestTypeMetadataNotFound = 'TestTypeMetadataNotFound',
  PlanAddonMetadataNotFound = 'PlanAddonMetadataNotFound',
  CreateMedicationCartFailed = 'CreateMedicationCartFailed',
  CreateMedicationCartItem = 'CreateMedicationCartItem',
  GetCartItemsDetailFailed = 'GetCartItemsDetailFailed',
  GetBookedAppointmentData = 'GetBookedAppointmentData',
  HandlePatientMilestoneFailed = 'HandlePatientMilestoneFailed',
  CreateCartItemFaield = 'CreateCartItemFailed',
  HandleCreateAdhocCartItemFailed = 'HandleCreateAdhocCartItemFailed',
  GetCartItemsDetail = 'GetCartItemsDetail',
  AppointmentNotFound = 'AppointmentNotFound',
  AppointmentNotPayed = 'AppointmentNotPayed',
  BookedAppointmentNotFound = 'BookedAppointmentNotFound',
  PatientNotFound = 'PatientNotFound',
  PatientPlanNotFound = 'PatientPlanNotFound',
  ExpectedDateNotProvided = 'ExpectedDateNotProvided',
  ExpectedDateShouldNotBeProvided = 'ExpectedDateShouldNotBeProvided',
  PrescriptionNotFound = 'PrescriptionNotFound',
  PrescriptionStatusIsArchived = 'PrescriptionStatusIsArchived',
  FreeSlotNotFound = 'FreeSlotNotFound',
  TestTypeConfigurationNotFound = 'TestTypeConfigurationNotFound',
}

export enum CreateCloudTaskFunctions {
  CreateCloudTaskToPatientIntakeReminder = 'CreateCloudTaskToPatientIntakeReminder',
  CreateCloudTaskToPartnerIntakeReminder = 'CreateCloudTaskToPartnerIntakeReminder',
  CreateCloudTaskToRemindToInvitePartner = 'CreateCloudTaskToRemindToInvitePartner',
  CreateCloudTaskToSendPatientFeedback = 'CreateCloudTaskToSendPatientFeedback',
  CreateCloudTaskToAppointmentCancellation = 'CreateCloudTaskToAppointmentCancellation',
  CreateCloudTaskToAppointmentSmsNotification = 'CreateCloudTaskToAppointmentSmsNotification',
}

export enum CreateCloudTaskActions {
  CreateCloudTaskFail = 'CreateCloudTaskFail',
  CreateCloudTaskInternalError = 'CreateCloudTaskInternalError',
  CreateCloudTaskToSendPatientFeedbackFail = 'CreateCloudTaskToSendPatientFeedbackFail',
}

export enum PaymentMethodServiceFunctions {
  CreatePaymentMethod = 'createPaymentMethod',
}

export enum PaymentMethodServiceActions {
  CreatePaymentMethodFailed = 'CreatePaymentMethodFailed',
}

export const StripeCardDeclineCodes = [
  'authentication_required',
  'approved_with_id',
  'generic_decline',
  'card_not_supported',
  'card_velocity_exceeded',
  'currency_not_supported',
  'duplicate_transaction',
  'expired_card',
  'incorrect_number',
  'incorrect_cvc',
  'incorrect_pin',
  'incorrect_zip',
  'insufficient_funds',
  'invalid_account',
  'invalid_amount',
  'invalid_cvc',
  'invalid_expiry_month',
  'invalid_expiry_year',
  'invalid_number',
  'invalid_pin',
  'issuer_not_available',
  'new_account_information_available',
  'not_permitted',
  'pin_try_exceeded',
  'testmode_decline',
  'withdrawal_count_limit_exceeded',

  /**
   * ** Should throw error for this decline codes **
   'call_issuer',
   'do_not_honor',
   'do_not_try_again',
   'fraudulent',
   'lost_card',
   'merchant_blacklist',
   'no_action_taken',
   'pickup_card',
   'processing_error',
   'reenter_transaction',
   'restricted_card',
   'revocation_of_all_authorizations',
   'revocation_of_authorization',
   'security_violation',
   'service_not_allowed',
   'stolen_card',
   'stop_payment_order',
   'try_again_later',
   'transaction_not_allowed',
   * */
]

export enum PaymentMethodsServiceFunctions {
  GetPaymentMethods = 'GetPaymentMethods',
  RemovePaymentMethod = 'RemovePaymentMethod',
  DetachPaymentMethod = 'DetachPaymentMethod',
  CreatePaymentSheet = 'CreatePaymentSheet',
}

export enum PaymentMethodsServiceActions {
  GetPaymentMethodsFailed = 'GetPaymentMethodsFailed',
  RemovePaymentMethodFailed = 'RemovePaymentMethodFailed',
  DetachPaymentMethodFailed = 'DetachPaymentMethodFailed',
  CreatePaymentSheetFailed = 'CreatePaymentSheetFailed',
}
