/* eslint-disable max-lines */
export enum AppointmentHandlerFunctions {
  RemovePatientPaymentAlertHandler = 'RemovePatientPaymentAlertHandler',
  AddAfterVisitSummaryHandler = 'AddAfterVisitSummaryHandler',
  ICAppointmentCreateHandler = 'ICAppointmentCreateHandler',
  AddPatientConfirmAlertHandler = 'AddPatientConfirmAlertHandler',
  CreateOHIPClaimHandler = 'CreateOHIPClaimHandler',
  RemovePatientAlertRequiredActionHandler = 'RemovePatientAlertRequiredActionHandler',
  UpdatePatientCareTeamHandler = 'UpdatePatientCareTeamHandler',
  UpdatePatientMilestonesHandler = 'UpdatePatientMilestonesHandler',
  CompleteInProgressAppointmentsHandler = 'CompleteInProgressAppointmentsHandler',
  GetAppointmentChangedId = 'GetAppointmentChangedId',
  SetCohortDate = 'SetCohortDate',
  RemoveCohortDate = 'RemoveCohortDate',
  RemovePlanCohortOnAppointmentStatusNoShowUpdateHandler = 'RemovePatientPlanCohortOnAppointmentStatusNoShowUpdateHandler',
}

export enum AppointmentHandlerActions {
  RemovePatientPaymentAlertFailed = 'RemovePatientPaymentAlertFailed',
  AddAfterVisitSummaryFailed = 'AddAfterVisitSummaryFailed',
  ICAppointmentCreateFailed = 'ICAppointmentCreateFailed',
  ICAppointmentCreateNoEmailOrPhone = 'ICAppointmentCreateNoEmailOrPhone',
  ICAppointmentCreateInvalidAppointment = 'ICAppointmentCreateInvalidAppointment',
  ICAppointmentCreateAppointmentNotFound = 'ICAppointmentCreateAppointmentNotFound',
  ICAppointmentCreatePayload = 'ICAppointmentCreatePayload',
  ICAppointmentCreateUserNotFound = 'ICAppointmentCreateUserNotFound',
  ICAppointmentCreateAcuitySyncFailed = 'ICAppointmentCreateAcuitySyncFailed',
  AddPatientConfirmAlertFailed = 'AddPatientConfirmAlertFailed',
  ExecutingForAppointment = 'ExecutingForAppointment',
  CreateOHIPClaimFailed = 'CreateOHIPClaimFailed',
  ServiceCodeAddedUnderClaimForAppointment = 'ServiceCodeAddedUnderClaimForAppointment',
  OHIPClaimGeneratedForAppointment = 'OHIPClaimGeneratedForAppointment',
  ClaimGenerationSkippedAppointmentIsNotCoveredByOHIP = 'ClaimGenerationSkippedAppointmentIsNotCoveredByOHIP',
  ClaimGenerationSkippedAppointmentIsNotDoneYet = 'ClaimGenerationSkippedAppointmentIsNotDoneYet',
  ClaimGenerationSkippedPatientMissingOHIP = 'ClaimGenerationSkippedPatientMissingOHIP',
  RemovePatientAlertRequiredActionFailed = 'RemovePatientAlertRequiredActionFailed',
  AppointmentNotFound = 'AppointmentNotFound',
  AppointmentsAreMarkedAsDone = 'AppointmentsAreMarkedAsDone',
  AppointmentExists = 'AppointmentExists',
  ClaimAlreadyExists = 'ClaimAlreadyExists',
  UpdatePatientCareTeamFailed = 'UpdatePatientCareTeamFailed',
  UpdatePatientMilestonesFailed = 'UpdatePatientMilestonesFailed',
  CompleteInProgressAppointmentsFailed = 'CompleteInProgressAppointmentsFailed',
  TestResultGenerationInProgress = 'TestResultGenerationInProgress',
  SetCohortDateFailed = 'SetCohortDateFailed',
  CohortRelationNotFound = 'CohortRelationNotFound',
  CohortHasSignedTask = 'CohortHasSignedTask',
  AppointmentIsNotLatestCreated = 'AppointmentIsNotLatestCreated',
  RemoveCohortDateFailed = 'RemoveCohortDateFailed',
  CohortNotFound = 'CohortNotFound',
  MultipleAppointmentFound = 'MultipleAppointmentFound',
  CohortHasSavedTaskDetails = 'CohortHasSavedTaskDetails',
  CohortDeletedForNoShow = 'CohortDeletedForNoShow',
  AppointmentCancelled = 'AppointmentCancelled',
  ArchiveMilestone = 'ArchiveMilestone',
  PushDefaultMilestone = 'PushDefaultMilestone',
  TestResultAlreadyExists = 'TestResultAlreadyExists',
}

export enum AuditTrailFunctions {
  AuditTrailHandler = 'AuditTrailHandler',
  PublishCloudFunctionAuditTrailWithoutUser = 'PublishCloudFunctionAuditTrailWithoutUser',
  PublishCFUserAuditTrail = 'PublishCFUserAuditTrail',
  PublishEmrDataChanged = 'PublishEmrDataChanged',
}

export enum AddOrRemoveQuestionHandlerFunctions {
  AddOrRemoveQuestionHandler = 'AddOrRemoveQuestionHandler',
}

export enum AddOrRemoveQuestionHandlerActions {
  AddOrRemoveQuestionHandlerFailed = 'AddOrRemoveQuestionHandlerFailed',
  UpdateQuestionnaireIntent = 'UpdateQuestionnaireIntent',
}
export enum AuditTrailActions {
  TableUpdatedIsNotAString = 'TableUpdatedIsNotAString',
  AuditTrailFailed = 'AuditTrailFailed',
  AddAuditTrailPatientEMR = 'AddAuditTrailPatientEMR',
  RevisionIdWasNotProvided = 'RevisionIdWasNotProvided',
  StartPullingMessages = 'StartPullingMessages',
  ProcessingComplete = 'ProcessingComplete',
  TimeoutApproaching = 'TimeoutApproaching',
  MessageProcessed = 'MessageProcessed',
  MessageProcessingFailed = 'MessageProcessingFailed',
  SubscriptionError = 'SubscriptionError',
}

export enum BackupFunctions {
  FirestoreDataExportHandler = 'FirestoreDataExportHandler',
  MysqlBackupHandler = 'MysqlBackupHandler',
}

export enum BackupActions {
  CreatingBackupForFirestoreDataInBucket = 'CreatingBackupForFirestoreDataInBucket',
  ExportFinishedSuccesfully = 'ExportFinishedSuccesfully',
  FirestoreDataExportFailed = 'FirestoreDataExportFailed',
  MySQLBackupRunFinishedSuccessfully = 'MySQLBackupRunFinishedSuccessfully',
  MysqlBackupFailed = 'MysqlBackupFailed',
}

export enum CacheFunctions {
  CachingFirstAvailDates = 'CachingFirstAvailDates',
  GetMonthsAndStartDate = 'GetMonthsAndStartDate',
  CacheFirstAvailableDate = 'CacheFirstAvailableDate',
  HandlerMinimumBookingLimitation = 'HandlerMinimumBookingLimitation',
  HandlerAppointmentsCreated = 'HandlerAppointmentsCreated',
  CleanOutdatedBookingIntentsHandler = 'CleanOutdatedBookingIntentsHandler',
  CleanOutdatedCarts = 'CleanOutdatedCarts',
  CleanOutdatedCartsHandler = 'CleanOutdatedCartsHandler',
  CleanOutdatedQuestionnaireIntentsHandler = 'CleanOutdatedQuestionnaireIntentsHandler',
  RemoveExpiredPasswordResetTokensHandler = 'RemoveExpiredPasswordResetTokensHandler',
  RemovePastServiceGroupAvailabilityHandler = 'RemovePastServiceGroupAvailabilityHandler',
}

export enum CacheActions {
  CachingFirstAvailDatesData = 'CachingFirstAvailDatesData',
  FreeSchedulingSlotNotFoundInFuture = 'FreeSchedulingSlotNotFoundInFuture',
  ServiceTypesNotFound = 'ServiceTypesNotFound',
  NoServiceProvidersFoundForServiceTypeIds = 'NoServiceProvidersFoundForServiceTypeIds',
  ServiceProvidersNotFound = 'ServiceProvidersNotFound',
  CacheFirstAvailableDateData = 'CacheFirstAvailableDateData',
  CacheFirstAvailableDateFailed = 'CacheFirstAvailableDateFailed',
  FreeSchedulingSlotNotFoundDeletedCurrentFirstAvailDate = 'FreeSchedulingSlotNotFoundDeletedCurrentFirstAvailDate',
  HandlerMinimumBookingLimitationFailed = 'HandlerMinimumBookingLimitationFailed',
  HandlerAppointmentsCreatedData = 'HandlerAppointmentsCreatedData',
  RemovingBookingIntents = 'RemovingBookingIntents',
  BookingIntentsCleared = 'BookingIntentsCleared',
  CleanOutdatedBookingIntentsFailed = 'CleanOutdatedBookingIntentsFailed',
  StripeKeyWasNotProvided = 'StripeKeyWasNotProvided',
  RemovingOutdatedCarts = 'RemovingOutdatedCarts',
  CartHasNoCartItems = 'CartHasNoCartItems',
  CantRemoveSetupIntent = 'CantRemoveSetupIntent',
  CartsCleared = 'CartsCleared',
  SetupIntentsCanceled = 'SetupIntentsCanceled',
  CleanOutdatedCartsFailed = 'CleanOutdatedCartsFailed',
  RemovingOutdatedQuestionnaireIntents = 'RemovingOutdatedQuestionnaireIntents',
  QuestionnaireIntentsCleared = 'QuestionnaireIntentsCleared',
  CleanOutdatedQuestionnaireIntentsFailed = 'CleanOutdatedQuestionnaireIntentsFailed',
  ExpiredPasswordResetTokensNotFound = 'ExpiredPasswordResetTokensNotFound',
  RemoveExpiredPasswordResetTokensFailed = 'RemoveExpiredPasswordResetTokensFailed',
  PastServiceGroupAvailabilityNotFound = 'PastServiceGroupAvailabilityNotFound',
  RemovePastServiceGroupAvailabilityFailed = 'RemovePastServiceGroupAvailabilityFailed',
  NotRemovingQuestionnaireIntent = 'NotRemovingQuestionnaireIntent',
  RemovingQuestionnaireIntent = 'RemovingQuestionnaireIntent',
  UpdatePatientIntakeStatusBack = 'UpdatePatientIntakeStatusBack',
  QuestionnaireNotFound = 'QuestionnaireNotFound',
  FailedOnOneQuestionnaireIntendInternalError = 'FailedOnOneQuestionnaireIntendInternalError',
}

export enum IvfCohortFunctions {
  CheckUpcomingCohorts = 'CheckUpcomingCohorts',
}

export enum IvfCohortActions {
  StartingToCheckUpcomingCohorts = 'StartingToCheckUpcomingCohorts',
  UpdateUpcomingPlans = 'UpdateUpcomingPlans',
  UpdateUpcomingCohortsFailed = 'UpdateUpcomingCohortsFailed',
}

export enum EmailNotificationFunctions {
  HandleServiceTypeNotFoundInAcuity = 'HandleServiceTypeNotFoundInAcuity',
  HandleServiceProviderNotFoundInAcuity = 'HandleServiceProviderNotFoundInAcuity',
  HandlerAccountDeletionRequestEmail = 'HandlerAccountDeletionRequestEmail',
  HandlerAppointmentRescheduled = 'HandlerAppointmentRescheduled',
  HandlerAppointmentUpdatedEmail = 'HandlerAppointmentUpdatedEmail',
  HandlerCreatedConflictingICAppointmentForProviderEmail = 'HandlerCreatedConflictingICAppointmentForProviderEmail',
  HandlerUpdatedConflictingICAppointmentForProviderEmail = 'HandlerUpdatedConflictingICAppointmentForProviderEmail',
  SendStaffEmail = 'SendStaffEmail',
  ProviderSendEmail = 'ProviderSendEmail',
  GetEmailProviders = 'GetEmailProviders',
  HandleProviderFailure = 'HandleProviderFailure',
  CheckDisabledProviders = 'CheckDisabledProviders',
  SendMail = 'SendMail',
  SendEmailCreatePatientAndAppointment = 'SendEmailCreatePatientAndAppointment',
  SendEmailWithOtp = 'SendEmailWithOtp',
  CreateOtpCodeOnDb = 'CreateOtpCodeOnDb',
  GetOtpCodeType = 'GetOtpCodeType',
  HandlerCreatePatientAndAppointment = 'HandlerCreatePatientAndAppointment',
  ThrowExceptionWithLogging = 'ThrowExceptionWithLogging',
  HandlerPartnerCreated = 'HandlerPartnerCreated',
  GetPartnerInvitation = 'GetPartnerInvitation',
  HandlerContactFormEmail = 'HandlerContactFormEmail',
  HandlerSendIntakeReminder = 'HandlerSendIntakeReminder',
  HandlerSendPartnerReminder = 'HandlerSendPartnerReminder',
  HandlerStaffFeedbackEmail = 'HandlerStaffFeedbackEmail',
  HandlerPatientFeedbackEmail = 'HandlerPatientFeedbackEmail',
  HandlerTasksOverdueEmail = 'HandlerTasksOverdueEmail',
  HandlerUpdatedAppointmentStatusNoShow = 'HandlerUpdatedAppointmentStatusNoShow',
  SendPartnerReminder = 'SendPartnerReminder',
  HandlerBulkDownloadReady = 'HandlerBulkDownloadReady',
  SendPatientEmail = 'SendPatientEmail',
}

export enum EmailNotificationActions {
  ServiceTypeIdIsNull = 'ServiceTypeIdIsNull',
  ServiceProviderIdIsNull = 'ServiceProviderIdIsNull',
  HandleServiceTypeNotFoundInAcuityFailed = 'HandleServiceTypeNotFoundInAcuity',
  EmailWasSentWhenServiceTypeNotFoundInAcuity = 'EmailWasSentWhenServiceTypeNotFoundInAcuity',
  EmailWasSentWhenServiceProviderNotFoundInAcuity = 'EmailWasSentWhenServiceProviderNotFoundInAcuity',
  PatientDoesntHaveEmailUsingDefaultSenderEmail = 'PatientDoesntHaveEmailUsingDefaultSenderEmail',
  AccountDeletionRequestWasSentForPatient = 'AccountDeletionRequestWasSentForPatient',
  HandlerAccountDeletionRequestEmailFailed = 'HandlerAccountDeletionRequestEmailFailed',
  HandleServiceProviderNotFoundInAcuityFailed = 'HandleServiceProviderNotFoundInAcuityFailed',
  AppointmentNotFound = 'AppointmentNotFound',
  NonConflictingAppointment = 'NonConflictingAppointment',
  ICAppointmentCreateInvalidAppointment = 'ICAppointmentCreateInvalidAppointment',
  NotAcuityProvider = 'NotAcuityProvider',
  NotAcuityServiceType = 'NotAcuityServiceType',
  NoConflictingAppointments = 'NoConflictingAppointments',
  AppointmentWasNotChanged = 'AppointmentWasNotChanged',
  AppointmentRescheduledEmailWasSentForAppointment = 'AppointmentRescheduledEmailWasSentForAppointment',
  HandlerAppointmentRescheduledFailed = 'HandlerAppointmentRescheduledFailed',
  AppointmentStatusUpdatedEmailWasSent = 'AppointmentStatusUpdatedEmailWasSent',
  AppointmentConflictingEmailWasSent = 'AppointmentConflictingEmailWasSent',
  HandlerCreatedConflictingICAppointmentForProviderEmailFailed = 'HandlerCreatedConflictingICAppointmentForProviderEmailFailed',
  HandlerUpdatedConflictingICAppointmentForProviderEmailFailed = 'HandlerUpdatedConflictingICAppointmentForProviderEmailFailed',
  HandlerAppointmentUpdatedEmailFailed = 'HandlerAppointmentUpdatedEmailFailed',
  AppointmentUpdatedEmailForStaff = 'AppointmentUpdatedEmailForStaff',
  UsingEmailProvider = 'UsingEmailProvider',
  TemplateDisabled = 'TemplateDisabled',
  ResponseCodeFromSendinBlue = 'ResponseCodeFromSendinBlue',
  SendEmailFailed = 'SendEmailFailed',
  DisabledOrDeactivatedProvider = 'DisabledOrDeactivatedProvider',
  DeactivatingProvider = 'DeactivatingProvider',
  TryingNextProvider = 'TryingNextProvider',
  HandleProviderFailureFailed = 'HandleProviderFailureFailed',
  EveryEmailProviderIsActive = 'EveryEmailProviderIsActive',
  ActivatingEmailProvider = 'ActivatingEmailProvider',
  SendEmailWithOtpData = 'SendEmailWithOtpData',
  CreateOtpCodeOnDbFailed = 'CreateOtpCodeOnDbFailed',
  UnknownTopicNameForOTPFunction = 'UnknownTopicNameForOTPFunction',
  HandlerCreatePatientAndAppointmentFailed = 'HandlerCreatePatientAndAppointmentFailed',
  ThrowExceptionWithLogging = 'ThrowExceptionWithLogging',
  HandlerPartnerCreatedFailed = 'HandlerPartnerCreatedFailed',
  PartnerInvitationNotFound = 'PartnerInvitationNotFound',
  PartnerInvitationDoesntHaveEmail = 'PartnerInvitationDoesntHaveEmail',
  PatientDoesntHaveEmail = 'PatientDoesntHaveEmail',
  PatientContactFormEmailWasSent = 'PatientContactFormEmailWasSent',
  HandlerContactFormEmailFailed = 'HandlerContactFormEmailFailed',
  HandlerSendIntakeReminderFailed = 'HandlerSendIntakeReminderFailed',
  CouldntFindRequiredInvitationOrReminder = 'CouldntFindRequiredInvitationOrReminder',
  HandlerSendPartnerReminderFailed = 'HandlerSendPartnerReminderFailed',
  StaffFeedbackForStaffUser = 'StaffFeedbackForStaffUser',
  HandlerStaffFeedbackEmailFailed = 'HandlerStaffFeedbackEmailFailed',
  HandlerPatientFeedbackEmailFailed = 'HandlerPatientFeedbackEmailFailed',
  HandlerTasksOverdueEmailFailed = 'HandlerTasksOverdueEmailFailed',
  HandlerUpdatedAppointmentStatusNoShowFailed = 'HandlerUpdatedAppointmentStatusNoShowFailed',
  SendPartnerReminderData = 'SendPartnerReminderData',
  CompileEjsFail = 'CompileEjsFail',
  HandlerBulkDownloadReadyFailed = 'HandlerBulkDownloadReadyFailed',
  BulkDownloadReadyEmailSent = 'BulkDownloadReadyEmailSent',
  AppointmentIsTentative = 'AppointmentIsTentative',
}

export enum OhipBillingFunctions {
  PullServiceCodes = 'PullServiceCodes',
  PullDiagnosticCodes = 'PullDiagnosticCodes',
  UpdateOhipClaimStatuses = 'UpdateOhipClaimStatuses',
  PullBillingCodesHandler = 'PullBillingCodesHandler',
  PullClaimStatusesHandler = 'PullClaimStatusesHandler',
}

export enum OhipBillingActions {
  PullServiceCodesForBillingNumber = 'PullServiceCodesForBillingNumber',
  ReceivedServiceCodesFromMDBilling = 'ReceivedServiceCodesFromMDBilling',
  MdBillingServiceCodesResponseAreNotAvailable = 'MdBillingServiceCodesResponseAreNotAvailable',
  DiagnosticCodesDontExist = 'DiagnosticCodesDontExist',
  PrepareDataToSave = 'PrepareDataToSave',
  StartToSave = 'StartToSave',
  PullServiceCodesFailed = 'PullServiceCodesFailed',
  PullDiagnosticCodesForBillingNumber = 'PullDiagnosticCodesForBillingNumber',
  MdBillingDiagnosticCodesResponseAreNotAvailable = 'MdBillingDiagnosticCodesResponseAreNotAvailable',
  ReceivedDiagnosticCodesFromMDBilling = 'ReceivedDiagnosticCodesFromMDBilling',
  PullDiagnosticCodesFailed = 'PullDiagnosticCodesFailed',
  StartUpdating = 'StartUpdating',
  UpdateOhipClaimStatusesFailed = 'UpdateOhipClaimStatusesFailed',
  StaffUserWithBillingNumberDoesntExist = 'StaffUserWithBillingNumberDoesntExist',
  PullBillingCodesHandlerFailed = 'PullBillingCodesHandlerFailed',
  ThereAreNoOhipClaims = 'ThereAreNoOhipClaims',
  ClaimsDetailsResponseIsEmpty = 'ClaimsDetailsResponseIsEmpty',
  PullClaimStatusesHandlerFailed = 'PullClaimStatusesHandlerFailed',
}

export enum OhipValidationFunctions {
  OhipStatusCheck = 'OhipStatusCheck',
}

export enum OhipValidationActions {
  NoAppointmentsToday = 'NoAppointmentsToday',
  NoOhipDataForPatients = 'NoOhipDataForPatients',
  OhipStatusUpdateComplete = 'OhipStatusUpdateComplete',
  OhipStatusCheckFailed = 'OhipStatusCheckFailed',
  PatientOhipAvailabilityNo = 'PatientOhipAvailabilityNo',
  DownMdBilling = 'DownMdBilling',
}

export enum PatientsFunctions {
  UpdatePatientStatus = 'UpdatePatientStatus',
  PatientScheduledMilestonesHandler = 'PatientScheduledMilestonesHandler',
  UpdatePatientStatusToNotActiveHandler = 'UpdatePatientStatusToNotActiveHandler',
  RemovePatientPrescriptionAlertHandler = 'RemovePatientPrescriptionAlertHandler',
  UpdateHasSameSexAtBirthHandler = 'UpdateHasSameSexAtBirthHandler',
  GetPartnerInvitation = 'GetPartnerInvitation',
  HandlePatientUpdate = 'HandlePatientUpdate',
}

export enum PatientsActions {
  PatientScheduledMilestonesHandlerFailed = 'PatientScheduledMilestonesHandlerFailed',
  FoundInActivePatients = 'FoundInActivePatients',
  UpdatePatientStatusToNotActiveHandlerFailed = 'UpdatePatientStatusToNotActiveHandlerFailed',
  PatientIsMarkedAsInactive = 'PatientIsMarkedAsInactive',
  RemovePrescriptionAlertFailed = 'RemovePrescriptionAlertFailed',
  RemovePrescriptionAlertSuccess = 'RemovePrescriptionAlertSuccess',
  MissingPrescriptionId = 'MissingPrescriptionId',
  UpdateSuccess = 'UpdateSuccess',
  UpdateFailed = 'UpdateFailed',
  HandlePatientUpdateFailed = 'HandlePatientUpdateFailed',
  PartnerInvitationNotFound = 'PartnerInvitationNotFound',
  UpdateHasSameSexAtBirthHandler = 'UpdateHasSameSexAtBirthHandler',
  AuthUserWasNotFound = 'AuthUserWasNotFound',
  SkipPhoneNumberUpdate = 'SkipPhoneNumberUpdate',
  SkipEmailUpdate = 'SkipEmailUpdate',
  PhoneNumberUpdated = 'PhoneNumberUpdated',
  EmailUpdated = 'EmailUpdated',
  CreatedReportPeriodMilestone = 'CreatedReportPeriodMilestone',
}

export enum PushNotificationFunctions {
  SendPushNotification = 'SendPushNotification',
  SendPushNotificationCommon = 'SendPushNotificationCommon',
  SendNotificationOnChatMessage = 'SendNotificationOnChatMessage',
  HandleSendNotificationError = 'HandleSendNotificationError',
  GetPatientPushNotificationForInit = 'GetPatientPushNotificationForInit',
  DeleteCloudTaskReminder = 'DeleteCloudTaskReminder',
  IsInitialConsultationStillActive = 'IsInitialConsultationStillActive',
  HandlerMedicationAdded = 'HandlerMedicationAdded',
  HandlerFertilityIQReleased = 'HandlerFertilityIQReleased',
  HandlerMedicationUpdated = 'HandlerMedicationUpdated',
  HandlerMedicationsDiscontinued = 'HandlerMedicationsDiscontinued',
  HandlerPartnerIntakeReminder = 'HandlerPartnerIntakeReminder',
  GetPatientPartners = 'GetPatientPartners',
  SendPush = 'SendPush',
  PushNotificationAdapterSend = 'PushNotificationAdapterSend',
  HandlerReminderToInvitePartner = 'HandlerReminderToInvitePartner',
  HandlerPatientIntakeReminder = 'HandlerPatientIntakeReminder',
  HandlerPushedPlansToPatient = 'HandlerPushedPlansToPatient',
  HandlerReportPeriodMilestonePushed = 'HandlerReportPeriodMilestonePushed',
  HandlerPaymentAlertCreated = 'HandlerPaymentAlertCreated',
  HandlerTestResultUpdated = 'HandlerTestResultUpdated',
  SendPatientIntakeReminder = 'SendPatientIntakeReminder',
  SendPartnerIntakeReminder = 'SendPartnerIntakeReminder',
  SendReminderToInvitePartner = 'SendReminderToInvitePartner',
  HandlerTestOrderMilestonesAdded = 'HandlerTestOrderMilestonesAdded',
  HandlerProcessWireTransferPaid = 'HandlerProcessWireTransferPaid',
  HandlerRequestPatientFeedback = 'HandlerRequestPatientFeedback',
  HandlerPushLibraryContent = 'HandlerPushLibraryContent',
}

export enum PushNotificationActions {
  StartCF = 'StartCF',
  SendingPushNotification = 'SendingPushNotification',
  SendNotificationOnChatMessage = 'SendNotificationOnChatMessage',
  SentPushNotification = 'SentPushNotification',
  UnregisteredToken = 'UnregisteredToken',
  HandleSendNotificationErrorFailed = 'HandleSendNotificationErrorFailed',
  PatientDoesntHavePatientPushNotificationData = 'PatientDoesntHavePatientPushNotificationData',
  PatientDoesntHaveCloudTaskReminderData = 'PatientDoesntHaveCloudTaskReminderData',
  CloudTaskReminderDeletedData = 'CloudTaskReminderDeletedData',
  InitialConsultationIsNotInActiveStatus = 'InitialConsultationIsNotInActiveStatus',
  PushNotificationWasntSent = 'PushNotificationWasntSent',
  HandlerMedicationAddedFailed = 'HandlerMedicationAddedFailed',
  PatientReportNotFound = 'PatientReportNotFound',
  HandlerFertilityIQReleasedFailed = 'HandlerFertilityIQReleasedFailed',
  HandlerMedicationUpdatedFailed = 'HandlerMedicationUpdatedFailed',
  HandlerMedicationsDiscontinuedFailed = 'HandlerMedicationsDiscontinuedFailed',
  PatientWithoutPartners = 'PatientWithoutPartners',
  PartnerDoesntHavePatientPushNotificationDataOrDisabled = 'PartnerDoesntHavePatientPushNotificationDataOrDisabled',
  PartnerPatientsCount = 'PartnerPatientsCount',
  SendError = 'SendError',
  HandlerPushedPlansToPatientFailed = 'HandlerPushedPlansToPatientFailed',
  PatientMilestoneNotFound = 'PatientMilestoneNotFound',
  PatientMilestoneDoesntHavePlanSelected = 'PatientMilestoneDoesntHavePlanSelected',
  HandlerReportPeriodMilestonePushedFailed = 'HandlerReportPeriodMilestonePushedFailed',
  UnsupportedAlertType = 'UnsupportedAlertType',
  PushNotificationNotSent = 'PushNotificationNotSent',
  PushNotificationForWireTransferNotSent = 'PushNotificationForWireTransferNotSent',
  SendingPushNotificationForReleasedTestResults = 'SendingPushNotificationForReleasedTestResults',
  HandlerTestResultUpdatedFailed = 'HandlerTestResultUpdatedFailed',
  SendPatientIntakeReminder = 'SendPatientIntakeReminder',
  SendPartnerIntakeReminder = 'SendPartnerIntakeReminder',
  SendReminderToInvitePartner = 'SendReminderToInvitePartner',
  MilestonesNotFound = 'MilestonesNotFound',
  LatestTestOrderMilestone = 'LatestTestOrderMilestone',
  HandlerTestOrderMilestonesAddedFailed = 'HandlerTestOrderMilestonesAddedFailed',
  SendingPushNotificationForWireTransfer = 'SendingPushNotificationForWireTransfer',
  SendingRequestPatientFeedbackFailed = 'SendingRequestPatientFeedbackFailed',
  PatientNotFound = 'PatientNotFound',
  AppointmentNotFound = 'AppointmentNotFound',
  Common = 'Common',
  PatientDoesntHaveRegistrationToken = 'PatientDoesntHaveRegistrationToken',
}

export enum QuestionnaireToProfileInfoFunctions {
  CreateHighlights = 'CreateHighlights',
  UpdatePatient = 'UpdatePatient',
  CreateOrUpdatePatientDetailFemale = 'CreateOrUpdatePatientDetailFemale',
  CreatePatientPreTermDeliveryHistory = 'CreatePatientPreTermDeliveryHistory',
  CreatePatientFamilyHealthProblemsHistory = 'CreatePatientFamilyHealthProblemsHistory',
  CreatePatientFullTimeDeliveryHistory = 'CreatePatientFullTimeDeliveryHistory',
  CreatePatientAbortionHistory = 'CreatePatientAbortionHistory',
  CreatePatientMiscariageHistory = 'CreatePatientMiscariageHistory',
  CreatePatientEctopicPregnancyHistory = 'CreatePatientEctopicPregnancyHistory',
  CreatePatientDoctor = 'CreatePatientDoctor',
  CreatePatientPreviousFertilityTreatmentHistories = 'CreatePatientPreviousFertilityTreatmentHistories',
  CreateOrUpdatePatientDetail = 'CreateOrUpdatePatientDetail',
  CreateOrUpdatePatientDetailMale = 'CreateOrUpdatePatientDetailMale',
  RemoveQuestionnaireFromPatientProfile = 'RemoveQuestionnaireFromPatientProfile',
  PublishQuestionTopic = 'PublishQuestionTopic',
  GetPatientDetailMaleValues = 'GetPatientDetailMaleValues',
  GetAnswer = 'GetAnswer',
  GetPatientDetailValues = 'GetPatientDetailValues',
  Handler = 'Handler',
  Create = 'Create',
}

export enum QuestionnaireToProfileInfoActions {
  ValidationFailed = 'ValidationFailed',
  CreateHighlightsFailed = 'CreateHighlightsFailed',
  UpdatePatientFailed = 'UpdatePatientFailed',
  CreateOrUpdatePatientDetailFemaleFailed = 'CreateOrUpdatePatientDetailFemaleFailed',
  CreatePatientPreTermDeliveryHistoryFailed = 'CreatePatientPreTermDeliveryHistoryFailed',
  CreatePatientFamilyHealthProblemsHistoryFailed = 'CreatePatientFamilyHealthProblemsHistoryFailed',
  CreatePatientFullTimeDeliveryHistoryFailed = 'CreatePatientFullTimeDeliveryHistoryFailed',
  CreatePatientAbortionHistoryFailed = 'CreatePatientAbortionHistoryFailed',
  CreatePatientMiscariageHistoryFailed = 'CreatePatientMiscariageHistoryFailed',
  CreatePatientEctopicPregnancyHistoryFailed = 'CreatePatientEctopicPregnancyHistoryFailed',
  CreatePatientDoctorData = 'CreatePatientDoctorData',
  CreatePatientDoctorAlreadyExists = 'CreatePatientDoctorAlreadyExists',
  CreatePatientDoctorTryingToSaveDuplicate = 'CreatePatientDoctorTryingToSaveDuplicate',
  CreatePatientDoctorFailed = 'CreatePatientDoctorFailed',
  CreatePatientPreviousFertilityTreatmentHistoriesFailed = 'CreatePatientPreviousFertilityTreatmentHistoriesFailed',
  DuplicatePatientCount = 'DuplicatePatientCount',
  CreateOrUpdatePatientDetailFailed = 'CreateOrUpdatePatientDetailFailed',
  CreateOrUpdatePatientDetailMaleFailed = 'CreateOrUpdatePatientDetailMaleFailed',
  FailedToFindData = 'FailedToFindData',
  RemoveQuestionnaireFromPatientProfileFailed = 'RemoveQuestionnaireFromPatientProfileFailed',
  PublishQuestionTopicFailed = 'PublishQuestionTopicFailed',
  AnswerIsMissingForPatientMaleDetail = 'AnswerIsMissingForPatientMaleDetail',
  AnswerIsMissing = 'AnswerIsMissing',
  AnswerIsMissingForDetail = 'AnswerIsMissingForDetail',
  AnswerIsMissingForPatientFemaleDetail = 'AnswerIsMissingForPatientFemaleDetail',
  QuestionnaireIntentNotFound = 'QuestionnaireIntentNotFound',
  PatientNotFound = 'PatientNotFound',
  QuestionnaireNotFound = 'QuestionnaireNotFound',
  HandlerFailed = 'HandlerFailed',
  AppointmentNotFound = 'AppointmentNotFound',
  ServiceProvider = 'ServiceProvider',
}

export enum TestResultCreatorFunctions {
  CreateTestResultForOrderItems = 'CreateTestResultForOrderItems',
  CreateTestResultForUltrasound = 'CreateTestResultForUltrasound',
  Create = 'Create',
  SaveTestResultsHistory = 'SaveTestResultsHistory',
  SaveThyroidProtocolHistory = 'SaveThyroidProtocolHistory',
  GetOrCreateThyroidResult = 'GetOrCreateThyroidResult',
  ProcessTestResultsForThyroidProtocol = 'ProcessTestResultsForThyroidProtocol',
  CreateResultAndObservations = 'CreateResultAndObservations',
  HandlerCreateTestResultForUltrasound = 'HandlerCreateTestResultForUltrasound',
  GenerateCryoCard = 'GenerateCryoCard',
}

export enum TestResultCreatorActions {
  CreateTestResultForOrderItems = 'CreateTestResultForOrderItems',
  CreateTestResultForOrderItemsFailed = 'CreateTestResultForOrderItemsFailed',
  CreateTestResultForUltrasound = 'CreateTestResultForUltrasound',
  CreateTestResultForUltrasoundFailed = 'CreateTestResultForUltrasoundFailed',
  CreatingTestResultForSpecimen = 'CreatingTestResultForSpecimen',
  ResultGenerationWasSkipped = 'ResultGenerationWasSkipped',
  StartCreatingSpecimen = 'StartCreatingSpecimen',
  SpecimenIsMissingAssociationWithPatient = 'SpecimenIsMissingAssociationWithPatient',
  TestTypesFound = 'TestTypesFound',
  LabIDMissing = 'LabIDMissing',
  TestResultsCreated = 'TestResultsCreated',
  ResultsHistorySaved = 'ResultsHistorySaved',
  SaveThyroidProtocolHistorySaved = 'SaveThyroidProtocolHistorySaved',
  MeasurementGenerationSkippedForRejectedSpecimen = 'MeasurementGenerationSkippedForRejectedSpecimen',
  MeasurementGenerationSkippedForGivenTestType = 'MeasurementGenerationSkippedForGivenTestType',
  CreateResultsFailed = 'CreateResultsFailed',
  SaveTestResultsHistoryFailed = 'SaveTestResultsHistoryFailed',
  SaveThyroidProtocolHistoryFailed = 'SaveThyroidProtocolHistoryFailed',
  GetOrCreateThyroidResultFailed = 'GetOrCreateThyroidResultFailed',
  ProcessTestResultsForThyroidProtocolFailed = 'ProcessTestResultsForThyroidProtocolFailed',
  ThyroidProtocolResultDayAlreadyCreated = 'ThyroidProtocolResultDayAlreadyCreated',
  ThyroidProtocolResultDayAddedBySystem = 'ThyroidProtocolResultDayAddedBySystem',
  TshTestResultAlreadyExists = 'TshTestResultAlreadyExists',
  TpoTestResultAlreadyExists = 'TpoTestResultAlreadyExists',
  SaveThyroidProtocolHistoryForTSHResultFailed = 'SaveThyroidProtocolHistoryForTSHResultFailed',
  SaveThyroidProtocolHistoryForTPOResultFailed = 'SaveThyroidProtocolHistoryForTPOResultFailed',
  ActionInvokedByStaff = 'ActionInvokedByStaff',
  CreatingTestResultForUltrasound = 'CreatingTestResultForUltrasound',
  AppointmentNotFound = 'AppointmentNotFound',
  HandlerCreateTestResultForUltrasoundFailed = 'HandlerCreateTestResultForUltrasoundFailed',
  GenerateCryoCardFailed = 'GenerateCryoCardFailed',
  CryoCardCreated = 'CryoCardCreated',
  CryoCardGenerationSkipped = 'CryoCardGenerationSkipped',
  StartGeneratingExternalTestResults = 'StartGeneratingExternalTestResults',
  StartGeneratingMeasurementsForExternalTestResults = 'StartGeneratingMeasurementsForExternalTestResults',
  OrderActionAlreadyInProgress = 'OrderActionAlreadyInProgress',
}

export enum TestResultCreateFunctions {
  CreateTestResultForOrderItems = 'CreateTestResultForOrderItems',
  CreateTestResultForUltrasound = 'CreateTestResultForUltrasound',
}

export enum TestResultCreateActions {
  CreateTestResultForOrderItems = 'CreateTestResultForOrderItems',
  CreateTestResultForOrderItemsFailed = 'CreateTestResultForOrderItemsFailed',
  CreateTestResultForUltrasoundFailed = 'CreateTestResultForUltrasoundFailed',
}

export enum DicomUltrasoundFunction {
  HandlerDicomUltrasoundImage = 'HandlerDicomUltrasoundImage',
}

export enum DicomUltrasoundActions {
  HandleDicomUltrasoundImages = 'HandleDicomUltrasoundImages',
  CheckUploadStatus = 'CheckUploadStatus',
  OperationCompleted = 'OperationCompleted',
  UploadSuccessful = 'UploadSuccessful',
  UploadFailed = 'UploadFailed',
  BucketFileDeleted = 'BucketFileDeleted',
  BucketFileMoved = 'BucketFileMoved',
  ExecutionInProgress = 'ExecutionInProgress',
  ExecutionException = 'ExecutionException',
}

export enum TasksFunctions {
  GetAutomatedTaskByType = 'GetAutomatedTaskByType',
  CreateTask = 'CreateTask',
  GetAssignee = 'GetAssignee',
  HandlerPlanPeriodReportedAutomatedTask = 'HandlerPlanPeriodReportedAutomatedTask',
  HandlerPlanPaid = 'HandlerPlanPaid',
  HandlerOrderCancelledAutomatedTask = 'HandlerOrderCancelledAutomatedTask',
  HandlerCreatePendingResultForOrderItem = 'HandlerCreatePendingResultForOrderItem',
  HandlerTestResultsSubmitted = 'HandlerTestResultsSubmitted',
  HandlerReferralRequiredTask = 'HandlerReferralRequiredTask',
  HandlerUploadReferralTask = 'HandlerUploadReferralTask',
  HandlerReleaseOfInformationRequired = 'HandlerReleaseOfInformationRequired',
  ReassignTask = 'ReassignTask',
  GetTaskDetails = 'GetTaskDetails',
  GetTaskStatuses = 'GetTaskStatuses',
  GetTasksList = 'GetTasksList',
  UpdateTaskStatus = 'UpdateTaskStatus',
  UpdateTaskStatusBulk = 'UpdateTaskStatusBulk',
  GetTaskPriorities = 'GetTaskPriorities',
  EditTask = 'EditTask',
  SetReadStatus = 'SetReadStatus',
  GetUnreadTasksCount = 'GetUnreadTasksCount',
  GetTaskDetailsV2 = 'GetTaskDetailsV2',
  HandlerVoidTasksAndMilestones = 'HandlerVoidTasksAndMilestones',
  HandlerHighPriorityResultReview = 'HandlerHighPriorityResultReview',
}

export enum TasksActions {
  CreateTaskFailed = 'CreateTaskFailed',
  CantFindTasks = 'CantFindTasks',
  UpdateTaskStatusBulk = 'UpdateTaskStatusBulk',
  CreateTaskSuccessfully = 'CreateTaskSuccessfully',
  ReassignTaskFailed = 'ReassignTaskFailed',
  ReassignTaskSuccessfully = 'ReassignTaskSuccessfully',
  GetTaskDetailsFailed = 'GetTaskDetailsFailed',
  GetTaskDetailsSuccessfully = 'GetTaskDetailsSuccessfully',
  GetTaskStatusesFailed = 'GetTaskStatusesFailed',
  GetTasksListFailed = 'GetTasksListFailed',
  GetTasksListSuccessfully = 'GetTasksListSuccessfully',
  UpdateTaskStatusFailed = 'UpdateTaskStatusFailed',
  UpdateTaskStatusBulkFailed = 'UpdateTaskStatusBulkFailed',
  UpdateTaskStatusSuccessfully = 'UpdateTaskStatusSuccessfully',
  GetTaskPrioritiesFailed = 'GetTaskPrioritiesFailed',
  EditTaskFailed = 'EditTaskFailed',
  PatientToAssignTaskNotFound = 'PatientToAssignTaskNotFound',
  TaskNotFound = 'TaskNotFound',
  GetTaskFiltersFailed = 'GetTaskFiltersFailed',
  GetReassigningHistory = 'GetReassigningHistory',
  ReassigningSucceed = 'ReassigningSucceed',
  SetReadStatusFailed = 'SetReadStatusFailed',
  GetUnreadTasksCountFailed = 'GetUnreadTasksCountFailed',
  AutomatedTask = 'AutomatedTask',
  CreatingTask = 'CreatingTask',
  CreatingTaskAssigneeAssignor = 'CreatingTaskAssigneeAssignor',
  CantCreateTask = 'CantCreateTask',
  CantCreateTaskDueDateNotProvided = 'CantCreateTaskDueDateNotProvided',
  CreatedTask = 'CreatedTask',
  HandlerPlanPeriodReportedAutomatedTaskFailed = 'HandlerPlanPeriodReportedAutomatedTaskFailed',
  ExternalPrescriptionIsNotCreatedYetOrTaskIsAlreadyCreatedForFax = 'ExternalPrescriptionIsNotCreatedYetOrTaskIsAlreadyCreatedForFax',
  PatientPlan = 'PatientPlan',
  PatientPlanMissingAutomatedTask = 'PatientPlanMissingAutomatedTask',
  PaymentOrderNotFound = 'PaymentOrderNotFound',
  HandlerPlanPaidFailed = 'HandlerPlanPaidFailed',
  PreviousTestOrderStatusWasNotPartiallyBookedOrBooked = 'PreviousTestOrderStatusWasNotPartiallyBookedOrBooked',
  TestOrderNotFound = 'TestOrderNotFound',
  TasksRelatedToOrderFound = 'TasksRelatedToOrderFound',
  PatientMilestonesRelatedToOrderFound = 'PatientMilestonesRelatedToOrderFound',
  TestOrderIsNotCancelled = 'TestOrderIsNotCancelled',
  HandlerOrderCancelledAutomatedTaskFailed = 'HandlerOrderCancelledAutomatedTaskFailed',
  OrderDoesNotContainItems = 'OrderDoesNotContainItems',
  SkipGenerateTask = 'SkipGenerateTask',
  SpecialWorkflowNotDefined = 'SpecialWorkflowNotDefined',
  HandlerCreatePendingResultForOrderItemFailed = 'HandlerCreatePendingResultForOrderItemFailed',
  HandlerGenerateTasksFromOrderFailed = 'HandlerGenerateTasksFromOrderFailed',
  PatientHasNoActivePlans = 'PatientHasNoActivePlans',
  CareNavigatorNotFound = 'CareNavigatorNotFound',
  TaskAssigneeNotFound = 'TaskAssigneeNotFound',
  HandlerTestResultsSubmittedFailed = 'HandlerTestResultsSubmittedFailed',
  HandlerReferralRequiredTaskData = 'HandlerReferralRequiredTaskData',
  PatientNotFound = 'PatientNotFound',
  HandlerReferralRequiredTaskFailed = 'HandlerReferralRequiredTaskFailed',
  HandlerUploadReferralTaskData = 'HandlerUploadReferralTaskData',
  HandlerUploadReferralTaskFailed = 'HandlerUploadReferralTaskFailed',
  HandlerReleaseOfInformationRequiredData = 'HandlerReleaseOfInformationRequiredData',
  HandlerReleaseOfInformationRequiredFailed = 'HandlerReleaseOfInformationRequiredFailed',
  OrderNotFound = 'OrderNotFound',
  HandlerVoidTasksAndMilestonesFailed = 'HandlerVoidTasksAndMilestonesFailed',
  StaffUserNotFound = 'StaffUserNotFound',
  NoOutOfPocketPayment = 'NoOutOfPocketPayment',
  UpdatedTestResult = 'UpdatedTestResult',
  TestResultIsNotAbnormal = 'TestResultIsNotAbnormal',
  AlreadyHaveTask = 'AlreadyHaveTask',
}

export enum TestOrderFunctions {
  CreateSpecimensForOrder = 'CreateSpecimensForOrder',
  RemoveSpecimensByOrder = 'RemoveSpecimensByOrder',
  FindOrderItems = 'FindOrderItems',
  CreateSpecimenGroupToTestOrderItemsMap = 'CreateSpecimenGroupToTestOrderItemsMap',
  CreateSpecialWorkflowToTestOrderItemsMap = 'CreateSpecialWorkflowToTestOrderItemsMap',
  CreateSpecimenAndSpecimenItemsForBloodWorkflow = 'CreateSpecimenAndSpecimenItemsForBloodWorkflow',
  CreateSingleSpecimen = 'CreateSingleSpecimen',
  CreateSpecimenAndSpecimenItemsForSwabWorkflow = 'CreateSpecimenAndSpecimenItemsForSwabWorkflow',
  GetStaffOrPatient = 'GetStaffOrPatient',
  GroupItemsByOrderAction = 'GroupItemsByOrderAction',
  GetUniqueServices = 'GetUniqueServices',
  MilestoneToTestTypeOrPanel = 'MilestoneToTestTypeOrPanel',
  GenerateSpecimenMilestones = 'GenerateSpecimenMilestones',
  TestOrderStatusUpdate = 'TestOrderStatusUpdate',
  UpdateOrderStatusBasedOnMilestonesAndProcedures = 'UpdateOrderStatusBasedOnMilestonesAndProcedures',
  GetStatusCodeType = 'GetStatusCodeType',
  CheckBookedAppointmentForEachMilestone = 'CheckBookedAppointmentForEachMilestone',
  CheckBookedAppointmentsForEachProcedures = 'CheckBookedAppointmentsForEachProcedures',
  CheckAllAppointmentsIsDoneForProcedures = 'CheckAllAppointmentsIsDoneForProcedures',
  CheckNotCompletedSpecimensForTestOrder = 'CheckNotCompletedSpecimensForTestOrder',
  CheckTestOrderIsReadyToBeCompleted = 'CheckTestOrderIsReadyToBeCompleted',
  HandlerTriggerOrderAction = 'HandlerTriggerOrderAction',
  HandlerRemoveMilestonesOfTestOrderCancelled = 'HandlerRemoveMilestonesOfTestOrderCancelled',
  HandlerCreateMilestonesForUpdatedTestOrder = 'HandlerCreateMilestonesForUpdatedTestOrder',
  HandlerGenerateSpecimensForBookedAppointment = 'HandlerGenerateSpecimensForBookedAppointment',
  HandlerGenerateSpecimensForOrderAppointment = 'HandlerGenerateSpecimensForOrderAppointment',
  HandlerGenerateTestResultForOrderAppointment = 'HandlerGenerateTestResultForOrderAppointment',
  GenerateSpecimensForAppointment = 'GenerateSpecimensForAppointment',
  GenerateSpecimens = 'GenerateSpecimens',
  CheckRejectedSpecimen = 'CheckRejectedSpecimen',
  HandlerStatusChangeResultUpdated = 'HandlerStatusChangeResultUpdated',
  TryToLinkSpecimenWithAppointment = 'TryToLinkSpecimenWithAppointment',
  CheckIsAllOrderTasksCompleted = 'CheckIsAllOrderTasksCompleted',
  VoidOrderMilestones = 'VoidOrderMilestones',
  HandlerGenerateSpecimensForLabIVF = 'HandlerGenerateSpecimensForLabIVF',
  HandlerGenerateTestResultAndObservationsForSpecimens = 'HandlerGenerateTestResultAndObservationsForSpecimens',
  HandlerCreatePendingResultForSpecimen = 'HandlerCreatePendingResultForSpecimen',
}

export enum TestOrderActions {
  CreateSpecimensForOrder = 'CreateSpecimensForOrder',
  GenerateSpecimensForPatient = 'GenerateSpecimensForPatient',
  SkipSpecimenGeneration = 'SkipSpecimenGeneration',
  CreateBloodWorkflowSpecimens = 'CreateBloodWorkflowSpecimens',
  CreateSemenWorkflowSpecimens = 'CreateSemenWorkflowSpecimens',
  CreateUrineWorkflowSpecimens = 'CreateUrineWorkflowSpecimens',
  CreateSwabWorkflowSpecimens = 'CreateSwabWorkflowSpecimens',
  RemoveSpecimensForOrder = 'RemoveSpecimensForOrder',
  FailedToFindOrderItems = 'FailedToFindOrderItems',
  FailedToCreateSpecimenGroup = 'FailedToCreateSpecimenGroup',
  FailedToCreateSpecimenAndItems = 'FailedToCreateSpecimenAndItems',
  FailedToCreateSingleSpecimen = 'FailedToCreateSingleSpecimen',
  MissingTestTypeOrPanelSpecimenGroupRelation = 'MissingTestTypeOrPanelSpecimenGroupRelation',
  PatientNotFound = 'PatientNotFound',
  OrderItemIsMissing = 'OrderItemIsMissing',
  SpecialWorkflowIsMissing = 'SpecialWorkflowIsMissing',
  InvalidOrderItem = 'InvalidOrderItem',
  MilestoneGenerationFailed = 'MilestoneGenerationFailed',
  GeneratingMilesone = 'GeneratingMilesone',
  MilesoneGenerated = 'MilesoneGenerated',
  SendingPushForMilestone = 'SendingPushForMilestone',
  TestOrderNotCreated = 'TestOrderNotCreated',
  TestOrderIsCancelled = 'TestOrderIsCancelled',
  TestOrderIsNotReady = 'TestOrderIsNotReady',
  NotAllRejectedSpecimen = 'NotAllRejectedSpecimen',
  NotCollectedSpecimen = 'NotCollectedSpecimen',
  FailedToUpdateTestOrder = 'FailedToUpdateTestOrder',
  NoAppointmentFound = 'NoAppointmentFound',
  AppointmentIsNotAssociatedWithOrder = 'AppointmentIsNotAssociatedWithOrder',
  FailedToUpdateTestOrderStatus = 'FailedToUpdateTestOrderStatus',
  TestOrderStatusCompleted = 'TestOrderStatusCompleted',
  TestOrderStatusUpdatedToNotCollected = 'TestOrderStatusUpdatedToNotCollected',
  UnknownTopicName = 'UnknownTopicName',
  NoMilestoneAssociated = 'NoMilestoneAssociated',
  NoProcedureAssociated = 'NoProcedureAssociated',
  FailedToCheckOrderBooked = 'FailedToCheckOrderBooked',
  NoProcdedureOrdered = 'NoProcdedureOrdered',
  NoAppointmentBooked = 'NoAppointmentBooked',
  NoAllAppointmentsDone = 'NoAllAppointmentsDone',
  FailedToCheckAllAppointments = 'FailedToCheckAllAppointments',
  FailedToCheckSpecimentExistence = 'FailedToCheckSpecimentExistence',
  NotCompletedSpeciment = 'NotCompletedSpeciment',
  OrderCompletionState = 'OrderCompletionState',
  OrderIsMarkedCompleted = 'OrderIsMarkedCompleted',
  RemoveMilestoneFailed = 'RemoveMilestoneFailed',
  OrderDoesNotExist = 'OrderDoesNotExist',
  VerifyFeatureFlag = 'VerifyFeatureFlag',
  SpecimenGenerationFailed = 'SpecimenGenerationFailed',
  TestResultGenerationFailed = 'TestResultGenerationFailed',
  RejectedTestResultGenerationFailed = 'RejectedTestResultGenerationFailed',
  OrderItemsMismatch = 'OrderItemsMismatch',
  SpecialWorkflowMismatch = 'SpecialWorkflowMismatch',
  GenerateSpecimensFailed = 'GenerateSpecimensFailed',
  HandlerGenerateSpecimensForOrderAppointment = 'HandlerGenerateSpecimensForOrderAppointment',
  TestOrderStatusUpdateSkipped = 'TestOrderStatusUpdateSkipped',
  SpecimenLinkedWithAppointment = 'SpecimenLinkedWithAppointment',
  TryToLinkSpecimen = 'TryToLinkSpecimen',
  CheckIsAllOrderTasksCompletedFailed = 'CheckIsAllOrderTasksCompletedFailed',
  MilestoneVoided = 'MilestoneVoided',
  OrderActionVoided = 'OrderActionVoided',
  SpecimenGenerationIsNotNeeded = 'SpecimenGenerationIsNotNeeded',
  TestResultGenerationSkipped = 'TestResultGenerationSkipped',
  LabAssociationMissing = 'LabAssociationMissing',
}

export enum MigrationsFunctions {
  CreatePatientDoctors = 'CreatePatientDoctors',
  CreateIsOhipValidAndSetAsTrueToPrevOhipNumbers = 'CreateIsOhipValidAndSetAsTrueToPrevOhipNumbers',
  UpdatePatientOhipToBeUnique = 'UpdatePatientOhipToBeUnique',
  RemoveDuplicatedOhipNumberFromPatients = 'RemoveDuplicatedOhipNumberFromPatients',
  GetPaymentOrdersStripePaymentIntentsIds = 'GetPaymentOrdersStripePaymentIntentsIds',
  UpdatePaymentOrderWithCardBrandAndLast4 = 'UpdatePaymentOrderWithCardBrandAndLast4',
  FillPaymentCardBrandAndLast4FromStripePaymentIntent = 'FillPaymentCardBrandAndLast4FromStripePaymentIntent',
  GetPaymentOrderItemIdsToBeOhipCovered = 'GetPaymentOrderItemIdsToBeOhipCovered',
  UpdatePaymentOrderItemWithOhipCoveredFlag = 'UpdatePaymentOrderItemWithOhipCoveredFlag',
  UpdatePaymentOrderWithReceiptNumber = 'UpdatePaymentOrderWithReceiptNumber',
  UpdatePaymentOrdersWithReceiptNumber = 'UpdatePaymentOrdersWithReceiptNumber',
  PopulateTestResult = 'PopulateTestResult',
  MoveCaIonophoreToFertilizationDirective = 'MoveCaIonophoreToFertilizationDirective',
  PopulateTestOrderIdAndMakeTestOrderIdRequired = 'PopulateTestOrderIdAndMakeTestOrderIdRequired',
  MigrateOldUserWithIvfToNewApproach = 'MigrateOldUserWithIvfToNewApproach',
  AddEmbryoNumberToExpandedEmbryo = 'AddEmbryoNumberToExpandedEmbryo',
}

export enum MigrationsActions {
  CreatePatientDoctors = 'CreatePatientDoctors',
  CreateIsOhipValidAndSetAsTrueToPrevOhipNumbers = 'CreateIsOhipValidAndSetAsTrueToPrevOhipNumbers',
  UpdatePatientOhipToBeUnique = 'UpdatePatientOhipToBeUnique',
  DeletedDuplicatedOhipFromPatient = 'DeletedDuplicatedOhipFromPatient',
  GetPaymentOrdersStripePaymentIntentsIdsFailed = 'GetPaymentOrdersStripePaymentIntentsIdsFailed',
  GetPaymentOrdersStripePaymentIntentsIdsSucceed = 'GetPaymentOrdersStripePaymentIntentsIdsSucceed',
  UpdatePaymentOrderWithCardBrandAndLast4 = 'UpdatePaymentOrderWithCardBrandAndLast4',
  UpdatePaymentOrderWithCardBrandAndLast4Failed = 'UpdatePaymentOrderWithCardBrandAndLast4Failed',
  FillPaymentCardBrandAndLast4FromStripePaymentIntentFailed = 'FillPaymentCardBrandAndLast4FromStripePaymentIntentFailed',
  GetPaymentOrderItemIdsToBeOhipCovered = 'GetPaymentOrderItemIdsToBeOhipCovered',
  GetPaymentOrderItemIdsToBeOhipCoveredFailed = 'GetPaymentOrderItemIdsToBeOhipCoveredFailed',
  UpdatePaymentOrderItemWithOhipCoveredFlagFailed = 'UpdatePaymentOrderItemWithOhipCoveredFlagFailed',
  UpdatePaymentOrderWithReceiptNumberFailed = 'UpdatePaymentOrderWithReceiptNumberFailed',
  UpdatePaymentOrdersWithReceiptNumber = 'UpdatePaymentOrdersWithReceiptNumber',
  UpdatePaymentOrdersWithReceiptNumberFailed = 'UpdatePaymentOrdersWithReceiptNumberFailed',
  PopulateTestResultTestOrderIdNull = 'PopulateTestResultTestOrderIdNull',
  ICSIAndCaIonophoreNotCreated = 'ICSIAndCaIonophoreNotCreated',
  PopulateTestOrderIdAndMakeTestOrderIdRequiredFailed = 'PopulateTestOrderIdAndMakeTestOrderIdRequiredFailed',
  PlanTypesForUpdate = 'PlanTypesForUpdate',
  PopulateTestOrderIdAndMakeTestOrderIdRequiredChunkProceed = 'PopulateTestOrderIdAndMakeTestOrderIdRequiredChunkProceed',
  MigrateOldUserWithIvfToNewApproachFailed = 'MigrateOldUserWithIvfToNewApproachFailed',
  AddingEmbryoNumberSkipped = 'AddingEmbryoNumberSkipped',
  AddingEmbryoNumber = 'AddingEmbryoNumber',
}

export enum BulkDownloadFunctions {
  HandlerBulkDownloadGenerate = 'HandlerBulkDownloadGenerate',
  GenerateMergedPDFDocument = 'GenerateMergedPDFDocument',
  GeneratePDFsZipFile = 'GeneratePDFsZipFile',
  UploadDocumentToStorage = 'UploadDocumentToStorage',
  GetCoverLetterFileDefinition = 'GetCoverLetterFileDefinition',
}

export enum BulkDownloadActions {
  HandlerBulkDownloadGenerateFailed = 'HandlerBulkDownloadGenerateFailed',
  HandlerBulkDownloadGenerateInitiated = 'HandlerBulkDownloadGenerateInitiated',
  PDFGenerationForBulkFailed = 'PDFGenerationForBulkFailed',
  BulkDownloadRequestNotFound = 'BulkDownloadRequestNotFound',
  StaffUserNotFound = 'StaffUserNotFound',
  BulkDownloadRequestItemsNotFound = 'BulkDownloadRequestItemsNotFound',
  GenerateFileToUploadFailed = 'GenerateFileToUploadFailed',
  GenerateMergedPDFDocumentFailed = 'GenerateMergedPDFDocumentFailed',
  GeneratePDFsZipFileFailed = 'GeneratePDFsZipFileFailed',
  UploadDocumentToStorage = 'UploadDocumentToStorage',
  UploadDocumentToStorageFailed = 'UploadDocumentToStorageFailed',
  TestResultNotFound = 'TestResultNotFound',
  GetCoverLetterFileDefinitionFailed = 'GetCoverLetterFileDefinitionFailed',
  PDFGenerationForCoverLetterFailed = 'PDFGenerationForCoverLetterFailed',
}

export enum HandlerForDicomReportFunctions {
  HandlerForDicomReport = 'HandlerForDicomReport',
  SaveOHSSOvaryMeasurements = 'SaveOHSSOvaryMeasurements',
  ValidatePayload = 'ValidatePayload',
}

export enum HandlerForDicomReportActions {
  DataTypeValidationFailed = 'DataTypeValidationFailed',
  PatientNotFound = 'PatientNotFound',
  AppointmentNotFound = 'AppointmentNotFound',
  UnableToMatch = 'UnableToMatch',
  ThereAreMoreThanOneTestResultForAppointment = 'ThereAreMoreThanOneTestResultForAppointment',
  TestResult = 'TestResult',
  ResultHasAlreadyBeenEntered = 'ResultHasAlreadyBeenEntered',
  ReportCantBeHandled = 'ReportCantBeHandled',
  DicomResultWasSuccessfullySaved = 'DicomResultWasSuccessfullySaved',
  HandlerForDicomReportFailed = 'HandlerForDicomReportFailed',
  SaveOHSSOvaryMeasurementsFailed = 'SaveOHSSOvaryMeasurementsFailed',
  ValidatePayload = 'ValidatePayload',
}

export enum HandlerPatientSampleUpdatedFunctions {
  HandlerPatientSampleUpdated = 'HandlerPatientSampleUpdated',
}

export enum HandlerPatientSampleUpdatedActions {
  MethodStart = 'MethodStart',
  Info = 'Info',
  InternalError = 'InternalError',
}

export enum ServiceGroupAvailabilityFunctions {
  GetAllFreeSlots = 'GetAllFreeSlots',
}

export enum ServiceGroupAvailabilityActions {
  LoadedFreeSlots = 'LoadedFreeSlots',
  SchedulingSlotsWereUnloaded = 'SchedulingSlotsWereUnloaded',
  CalculatedFreeSlots = 'CalculatedFreeSlots',
}
