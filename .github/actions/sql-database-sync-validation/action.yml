name: 'Run SQL database sync validation'
description: 'Checks if TypeORM sync works for data-seeds database'
inputs:
  node_version:
    description: 'Node version'
    required: false
    default: v20.11.1

runs:
  using: 'composite'
  steps:
    - name: SQL database sync validation
      env:
        HUSKY: 0
      run: |
        echo "::group::Validate Env"
        echo "whoami"
        whoami
        echo "==> Docker Version"
        docker --version
        echo "==> gcloud Version"
        gcloud --version
        echo "::endgroup::"
        echo "::group::Activate NVM and install NodeJS version"
        source ~/.nvm/nvm.sh
        nvm install ${{ inputs.node_version }}
        nvm use ${{ inputs.node_version }}
        PATH="$HOME/.yarn/bin:$PATH"
        echo "::endgroup::"

        echo "::group::Auth with GCLOUD"
        cat >> service-account.json << EOF
        ${{ env.integ_test_service_account }}
        EOF
        echo "Using PROJECT_ID: ${{ env.seeds_project_id }}"
        gcloud auth activate-service-account --key-file=./service-account.json --project=${{ env.seeds_project_id }}
        rm ./service-account.json
        echo "::endgroup::"

        echo "::group::Get backend testing secrets"
        gcloud secrets versions access latest --secret=BACKEND_E2E_TESTING_SQL_SYNC --project=${{ env.seeds_project_id }} > ./.env
        echo "::endgroup::"

        echo "::group::Install BE dependency"
        yarn install 
        yarn --cwd ./migrations install
        echo "::endgroup::"

        echo "::group::Setup backend data seeds"

        echo "Clearing BE code folder"
        rm -rf ./data-seeds/backend-testing-dist && mkdir ./data-seeds/backend-testing-dist

        echo "Save BE secrets for NestJS to ./data-seeds/.env"
        gcloud secrets versions access latest --secret=BACKEND_E2E_TESTING --project=${{ env.seeds_project_id }} > ./data-seeds/.env
                
        echo "::endgroup::"

        echo "::group::Purging all Images, Containers, Volumes, and Networks"
        if [ "$(docker ps -a -q)" ]; then
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
        fi
        sudo docker compose -f ./data-seeds/docker-compose.yaml down
        sudo docker compose -f ./data-seeds/docker-compose-integration-tests.yaml down
        sudo docker system prune --all --force --volumes
        echo "::endgroup::"

        echo "::group::Run backend with data seeds"
        sudo docker compose -f ./data-seeds/docker-compose-integration-tests.yaml up --detach --force-recreate
        echo "::endgroup::"

        echo "::group::Run DB migration"
        cd ./migrations
        
        echo "Run prepare to copy env file"
        yarn run prepare

        echo "::group::Sleep 60 seconds to wait for DB to be ready"
        sleep 60
        echo "::endgroup::"

        echo "Run DB migration"
        yarn migrate

        echo "Run DB schema sync"
        yarn schema-sync

        cd ..
        echo "::endgroup::"
        
        echo "::group::Purging all Images, Containers, Volumes, and Networks"
        if [ "$(docker ps -a -q)" ]; then
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
        fi
        sudo docker compose -f ./data-seeds/docker-compose.yaml down
        sudo docker compose -f ./data-seeds/docker-compose-integration-tests.yaml down
        sudo docker system prune --all --force --volumes
        echo "::endgroup::"
      shell: bash
